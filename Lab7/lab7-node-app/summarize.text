1.
    Synchronous
    - จะทำงานให้เสร็จตามบรรทัด โดยจะเริ่มทำงานที่บรรทัด func_1() ให้เสร็จก่อนจะทำงานบรรทัดต่อไป ซึ่งก็คือ func_2()

    Asynchronous 
    - จะทำงานม่สนบรรทัดไหนก่อน บรรทัดไหนหลัง จะเป็นการทำงานแบบทำใครทำมัน

2.
    Callback
    - จะเป็นการส่งฟังก์ชันไปเป็น argument ให้ฟังก์ชันอื่น ซึ่งในฟังก์ชันอื่นนั้นก็จะทำงานทีละบรรทัดไปจนการทำงานเสร็จ
    - ในฟังก์ชัน myRequest จะรอการทำงานของ ฟังก์ชัน myCallback ให้เสร็จสิ้นก่อนจากนั้นก็ทำงานที่บรรทัดต่อไป 

    Callback Asynchronous 
    - จะเป็นการส่งฟังก์ชันไปเป็น argument ให้ฟังก์ชันอื่น ซึ่งการใช้ method 'setTimeout' กับฟังก์ชัน myCallback จะทำให้ฟังก์ชันนี้ทำงานแบบ Asynchronous ทำให้ฟังก์ชัน myRequest ทำงานใครทำงานมันไม่ต้องรอให้ myCallback ทำงานจนเสร็จก่อน

3. 
    Call Stack 
    - จะเป็นการจดจำลำดับการทำงานโดยจะทำงานทีละบรรทัดจนเสร็จ จึงจะทำงานบรรทัดต่อไปตามลำดับที่ stack ไว้
    >>> เริ่มที่บรรทัดที่ 25 และจะมีลำดับการทำงานตามนี้ บรรที่ 2 > 3 > 8 > 13 > 18

    Even Loop
    - เมื่อใช้ 'setTimeout' กับจะเรียก callback ฟังก์ชัน myCallback ขึ้นมาหลังจากผ่านไป 0, 1 และ 2 วินาทีตามลำดับ
      แต่จะต้องรอคิวให้การทำงานใน Call Stack เสร็จสิ้นก่อนแล้วถึงจะแสดงผลใน setTimeout ออกมา

4.
    Promise
    - จะเรียกใช้ method .then() ก็ต่อเมื่อ Promise เรียกใช้ resolve ที่บ่งบอกว่าทำงานฟังก์ชันนั่นเสร็จแล้วให้ทำงานขั้นต่อไปได้
    >> resolve({id: sid, name: 'Nutthapong'}) จะส่งข้อมูลที่เป็น object ไปใช้ใน .then()

    Promise.all()
    - ใช้เพื่อจะทำคำสั่งจาก Promise หลายๆอันที่ต้องการทำไปพร้อมๆกันโดยไม่สนเวลา ซึ่งจะถูก .then() เรียกออกมาพร้อมกันแต่จะมีลำดับของข้อมูลตามเวลา 

    Promise.race()
    - ใช้เพื่อจะทำคำสั่งจาก Promise หลายๆอันที่ต้องการทำไปพร้อมๆกัน แต่จะถูก .then() เรียกตัวที่อยู่ใน resolve ที่เสร็จก่อนออกมาเป็นเหมือนการแข่งขันกันที่จะเอาตัวที่เสร็จก่อนเท่านั้น

5.
    Async
    - เป็นการประกาศให้ฟังก์ชันนั้นเป็นแบบ Asynchronous ซึ่งจะใช้คู่กันกับ await

    Await
    - ใช้เพื่อบอกให้รอจนกว่าคำสั่งนั้นจะเสร็จ ถึงจะสามารถทำงานอันต่อไปได้ การจะใช้ await ได้นั้นต้องประกาศ async ที่ฟังก์ชันนั้นก่อน